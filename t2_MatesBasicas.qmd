## Instalación de Software

### Cómo instalar R 

Instalar R es muy sencillo; pero es conveniente que dispongáis de su versión más reciente y que regularmente lo pongáis al día. Los pasos a realizar en  Windows o Mac OS X para instalar su última versión son los siguientes:

* Si sois usuarios de Windows, acceded a la página web de la  [*CRAN*](http://cran.r-project.org/) y pulsad sobre el enlace *Download R for Windows*. A continuación, entrad en el enlace *base*,  descargad R y seguid las instrucciones de instalación del  documento *Installation and other instructions* que encontraréis en esa  misma página. 

* Si sois usuarios de Mac OS X, acceded  a la página web de la  [*CRAN*](http://cran.r-project.org/) y pulsad sobre el enlace  *Download R for Mac OS X*. A continuación, descargad el fichero `.pkg`  correspondiente y, una vez descargado, abridlo y seguid las instrucciones del Asistente de Instalación.

* Si trabajáis con Ubuntu o Debian, para instalar  la última versión de R basta que ejecutéis en una terminal, estando conectados a Internet, la siguiente instrucción: 
```
sudo aptitude install r-base
```


Cuando instaláis R para Windows o Mac OS X, con él también se os instala una interfaz gráfica que se abrirá al abrir la aplicación y en la que podréis trabajar. 

![](Figuras/RTerminal.png){width="80%" fig-align="center"}

La instalación para Linux no lleva una interfaz por defecto, así que sus usuarios  tienen que  trabajar con R en la terminal (ejecutando R para iniciar una sesión) o instalar aparte una interfaz.  Independientemente de todas estas posibilidades, en este curso usaremos  *RStudio* como interfaz gráfica de usuario de R para todos los sistemas operativos. 

::: {.callout-note}
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R es un software libre y viene sin GARANTIA ALGUNA.
Usted puede redistribuirlo bajo ciertas circunstancias.
Escriba 'license()' o 'licence()' para detalles de distribucion.

R es un proyecto colaborativo con muchos contribuyentes.
Escriba 'contributors()' para obtener más información y
'citation()' para saber cómo citar R o paquetes de R en publicaciones.

Escriba 'demo()' para demostraciones, 'help()' para el sistema on-line de ayuda,
o 'help.start()' para abrir el sistema de ayuda HTML con su navegador.
Escriba 'q()' para salir de R.
:::

![](Figuras/MM1.jpg){width="40%" fig-align="center"}


Para que nuestra interfaz con R sea agradable, podemos usar varias aplicaciones disponibles, como `Rstudio`, `Visual Studio Code` o `Jamovi`. Por facilidad usaremos `Jamovi`

### Instalación de Jamovi
Según la pagina de [Jamovi](https://www.jamovi.org/), y en una traducción al castellano usando Google translate obtenemos:

* Estadísticas simplificadas: Jamovi es una nueva hoja de cálculo estadística de “tercera generación”. Diseñada desde cero para que sea fácil de usar, Jamovi es una alternativa atractiva a productos estadísticos costosos como SPSS y SAS.
* Integración con R: Jamovi está construido sobre el lenguaje estadístico R, lo que le brinda acceso a lo mejor que la comunidad estadística tiene para ofrecer. ¿Le gustaría el código R para sus análisis? Jamovi también puede proporcionárselo.

* Gratuito y abierto: Jamovi siempre será gratuito y abierto: ese es uno de nuestros valores fundamentales, porque Jamovi está hecho por la comunidad científica, para la comunidad científica.

Adicional a esto, instalaremos el software, siguiendo las instrucciones que aparecen en el botón **Download and install jamovi onto your computer**

Luego de la instalación debe aparecer en su busqueda de windows.
![](Figuras/JAM1.png){width="50%" fig-align="center"}

Y nos aparecerá esta interfaz para trabajar.


![](Figuras/JAM2.png){width="80%" fig-align="center"}

## Matemáticas básicas

### Funciones lineales

En geometría analítica y álgebra elemental, una función lineal es una función polinómica de primer grado, es decir, una función de una variable (normalmente esta variable se denota con $x$, que puede ser escrita como la suma de términos de la forma 
$$f(x)=mx+b$$
donde $m$ determina la pendiente o inclinación de la recta, y la constante $b$ determina el punto de corte de la recta con el eje vertical $y$.

En Farmacia es útil observar la relación entre dosis y respuesta:

```{r, echo=TRUE,message=FALSE, warning=FALSE, out.width='60%',fig.align='center'}
library(tidyverse)
x = seq(-3,3)
y = 2-0.5*x
datos = data.frame(x, y)
datos %>% ggplot(aes(x=x, y=y))+
  geom_line()+theme_bw()
```


### Funciones exponenciales

Una función exponencial es una función matemática de la forma $$f(x) = a \cdot b^x$$,

donde:

* $a$ es una constante que representa el valor inicial.
* $b$ es la base de la función exponencial.
*  $x$ es la variable independiente.

Estas funciones son comunes en situaciones de crecimiento o decrecimiento rápido, como el crecimiento poblacional, la desintegración radiactiva, y el interés compuesto.

Consideremos una población de bacterias que se duplica cada hora. Si inicialmente hay 100 bacterias, podemos modelar el crecimiento de la población con la función exponencial:

$$P(t) = 100 \cdot 2^t$$

Aquí:

* $P(t)$ es la población de bacterias en el tiempo $t$ (en horas).
* 100 es el valor inicial ( $a$ ).
* 2 es la base ( $b$ ), ya que la población se duplica cada hora.

```{r}
x = seq(-3,3, 0.01)
y = 100*2^x
datos = data.frame(x, y)
datos %>% ggplot(aes(x=x, y=y))+
  geom_line()+theme_bw()
```
```{r}
x = seq(-3,3, 0.01)
y = 100*exp(x)
datos = data.frame(x, y)
datos %>% ggplot(aes(x=x, y=y))+
  geom_line()+theme_bw()
```
::: {.callout-note}
Es muy importante reconocer el número $e\approx $ `r exp(1)` como la base más usada para tranajar con funciones exponenciales. Esto se debe a la propiedad siguiente:
$$y = ab^x= e^{ln(ab^x)}=e^{xln b + a}=e^ae^{xln b}=\tilde{a}e^{\tilde{b}x}$$
:::
### Funciones polinomicas


Una función polinomial de grado 2, también conocida como función cuadrática, tiene la forma $f(x) = ax^2 + bx + c$, donde:

* $a$,  $b$ y $c$ son constantes reales.
* $a$ es distinto de 0.

La gráfica de una función cuadrática es una parábola que puede abrirse hacia arriba (si $a$ es positivo) o hacia abajo (si $a$ es negativo).

```{r}
x = seq(-3,3, 0.01)
y = 2+0.5*x-0.4*x^2
datos = data.frame(x, y)
datos %>% ggplot(aes(x=x, y=y))+
  geom_line()+theme_bw()
```
```{r}
x = seq(-10,10, 0.01)
y = 2+0.5*x-0.4*x^2 +0.5*x^3-0.002*x^5
datos = data.frame(x, y)
datos %>% ggplot(aes(x=x, y=y))+
  geom_line()+theme_bw()
```
:::{.callout-note}
Para recordar factorización, ¿qué sucede si graficamos la siguiente función?
$$y=(x-2)(x+1.5)(x-0.5)(x+3)(x+2)(x-4)$$
:::

```{r}
x = seq(-3,4, 0.01)
y = (x-2)*(x+1.5)*(x-0.5)*(x+3)*(x+2)*(x-4)
datos = data.frame(x, y)
datos %>% ggplot(aes(x=x, y=y))+
  geom_line()+theme_bw()+
  geom_hline(yintercept = 0)
```

### Practica 1

* Formad grupos de 1, 2 o 3 integrantes.

* Trabajaréis con los datos que aparecen en el [enlace](https://raw.githubusercontent.com/Cruzalirio/Ucentral/master/Bases/Global_Carbon_Budget_2018.csv).  Abrimos el enlace y con click derecho --> Guardar como y seguimos las instrucciones. 

* Estos datos son tomados de la investigación sobre calentamiento global del [Global Carbon Project](https://globalcarbonbudgetdata.org/latest-data.html). Allí se encontrará más información por si os interesa. Vamos a introducir los gráficos de dispersión y la visualización de posibles relaciones entre variables cuantitativas.

Seguiremos los siguientes pasos.

* Con la opción abrir, importamos la base de datos en JAMOVI.
* Verificamos que todas las variables estén cargadas

* Reproduciremos esta gráfica de dispersión. ¿Cómo se realiza la gráfica? ¿De los tipos de funciones, cuál se ajustaria mejor?
```{r, echo=FALSE,message=FALSE, warning=FALSE, out.width='60%',fig.align='center'}
data = read.csv2("https://raw.githubusercontent.com/Cruzalirio/Ucentral/master/Bases/Global_Carbon_Budget_2018.csv")
scatr::scat( data = data,x = "Year", y = "fossil.fuel.and.industry")
```

* Reproduciremos esta gráfica de dispersión. ¿Cómo se realiza la gráfica? ¿De los tipos de funciones, cuál se ajustaria mejor?
```{r, echo=FALSE,message=FALSE, warning=FALSE, out.width='60%',fig.align='center'}
scatr::scat( data = data,x = "ocean.sink", y = "fossil.fuel.and.industry")
```
* Reproduciremos esta gráfica de dispersión. ¿Cómo se realiza la gráfica? ¿De los tipos de funciones, cuál se ajustaria mejor?
```{r, echo=FALSE,message=FALSE, warning=FALSE, out.width='60%',fig.align='center'}
scatr::scat( data = data,x = "ocean.sink", y = "land.sink")
```


* Debéis exportar las gráficas en formato PDF.
* Entregad el reporte en la tarea de Aula Digital disponible. Revisad la fecha en que cierra la tarea.
